"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger = /** @class */ (function () {
    function Logger(projectOptions) {
        this.projectOptions = projectOptions;
    }
    Logger.prototype.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.isDebug()) {
            console.log.apply(console, [message].concat(optionalParams));
        }
    };
    Logger.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.isInfo()) {
            console.log.apply(console, [message].concat(optionalParams));
        }
    };
    Logger.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.isWarn()) {
            console.log.apply(console, [message].concat(optionalParams));
        }
    };
    Logger.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.isError()) {
            console.error.apply(console, [message].concat(optionalParams));
        }
    };
    Logger.prototype.isDebug = function () {
        return this.projectOptions.logLevel === 'debug';
    };
    Logger.prototype.isInfo = function () {
        return this.isDebug() || this.projectOptions.logLevel === 'info';
    };
    Logger.prototype.isWarn = function () {
        return this.isInfo() || this.projectOptions.logLevel === 'warn';
    };
    Logger.prototype.isError = function () {
        return this.isWarn() || this.projectOptions.logLevel === 'error';
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map