"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var NestedError = require("nested-error-stacks");
var Auto = /** @class */ (function () {
    function Auto(projectOptions) {
        this.autoTargets = {};
        this.projectOptions = projectOptions;
    }
    Auto.prototype.addTarget = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!target.name) {
                    this.projectOptions.logger.error('Invalid target', target);
                    throw new Error("'name' is required on target.");
                }
                if (target.name in this.autoTargets) {
                    return [2 /*return*/];
                }
                this.autoTargets[target.name] = {
                    complete: false,
                    target: target
                };
                return [2 /*return*/];
            });
        });
    };
    Auto.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var allComplete, progressMade, _i, _a, autoTargetName, autoTarget, newTargets, err_1, message, _b, _c, autoTargetName, autoTarget;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.resolveRequisites()];
                    case 1:
                        _d.sent();
                        allComplete = Object.keys(this.autoTargets).length === 0;
                        _d.label = 2;
                    case 2:
                        if (!!allComplete) return [3 /*break*/, 11];
                        allComplete = true;
                        progressMade = false;
                        _i = 0, _a = Object.keys(this.autoTargets);
                        _d.label = 3;
                    case 3:
                        if (!(_i < _a.length)) return [3 /*break*/, 10];
                        autoTargetName = _a[_i];
                        _d.label = 4;
                    case 4:
                        _d.trys.push([4, 8, , 9]);
                        autoTarget = this.autoTargets[autoTargetName];
                        if (autoTarget.complete) {
                            return [3 /*break*/, 9];
                        }
                        allComplete = false;
                        if (!this.preRequisitesComplete(autoTarget)) {
                            return [3 /*break*/, 9];
                        }
                        this.projectOptions.logger.info("Running target: " + autoTargetName);
                        if (!autoTarget.target.run) return [3 /*break*/, 7];
                        return [4 /*yield*/, autoTarget.target.run(this.projectOptions)];
                    case 5:
                        newTargets = _d.sent();
                        if (!newTargets) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.addTargets(newTargets, autoTarget.target)];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7:
                        autoTarget.complete = true;
                        progressMade = true;
                        return [3 /*break*/, 9];
                    case 8:
                        err_1 = _d.sent();
                        throw new NestedError("Failed to process \"" + autoTargetName + "\"", err_1);
                    case 9:
                        _i++;
                        return [3 /*break*/, 3];
                    case 10:
                        if (!allComplete && !progressMade) {
                            message = 'Stuck processing targets, waiting for: ';
                            for (_b = 0, _c = Object.keys(this.autoTargets); _b < _c.length; _b++) {
                                autoTargetName = _c[_b];
                                autoTarget = this.autoTargets[autoTargetName];
                                if (autoTarget.complete) {
                                    continue;
                                }
                                message += "\n  - " + autoTargetName + " pre: [" + autoTarget.target.preRequisites.join(', ') + "] post: [" + autoTarget.target.postRequisites.join(', ') + "]";
                            }
                            throw new Error(message);
                        }
                        return [3 /*break*/, 2];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    Auto.prototype.resolveRequisites = function () {
        return __awaiter(this, void 0, void 0, function () {
            var complete, _i, _a, autoTargetName, autoTarget, _b, _c, preRequisiteName, projectTarget, _d, _e, projectTargetName, projectTarget;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        complete = false;
                        _f.label = 1;
                    case 1:
                        if (!!complete) return [3 /*break*/, 12];
                        complete = true;
                        _i = 0, _a = Object.keys(this.autoTargets);
                        _f.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 11];
                        autoTargetName = _a[_i];
                        autoTarget = this.autoTargets[autoTargetName];
                        _b = 0, _c = autoTarget.target.preRequisites;
                        _f.label = 3;
                    case 3:
                        if (!(_b < _c.length)) return [3 /*break*/, 6];
                        preRequisiteName = _c[_b];
                        if (!!(preRequisiteName in this.autoTargets)) return [3 /*break*/, 5];
                        projectTarget = this.projectOptions.targets[preRequisiteName];
                        if (!projectTarget) {
                            throw new Error("Could not find pre-requisite target \"" + preRequisiteName + "\" (resolveRequisites)");
                        }
                        return [4 /*yield*/, this.addTarget(projectTarget)];
                    case 4:
                        _f.sent();
                        complete = false;
                        _f.label = 5;
                    case 5:
                        _b++;
                        return [3 /*break*/, 3];
                    case 6:
                        _d = 0, _e = Object.keys(this.projectOptions.targets);
                        _f.label = 7;
                    case 7:
                        if (!(_d < _e.length)) return [3 /*break*/, 10];
                        projectTargetName = _e[_d];
                        projectTarget = this.projectOptions.targets[projectTargetName];
                        if (!((projectTarget.postRequisites || []).indexOf(autoTargetName) >= 0)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.addTarget(projectTarget)];
                    case 8:
                        _f.sent();
                        if (!autoTarget.target.preRequisites.includes(projectTargetName)) {
                            autoTarget.target.preRequisites.push(projectTargetName);
                            complete = false;
                        }
                        _f.label = 9;
                    case 9:
                        _d++;
                        return [3 /*break*/, 7];
                    case 10:
                        _i++;
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 1];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    Auto.prototype.preRequisitesFullfilled = function (autoTarget) {
        var _this = this;
        return autoTarget.target.preRequisites.every(function (preRequisiteTargetName) {
            var preRequisiteAutoTarget = _this.autoTargets[preRequisiteTargetName];
            if (!preRequisiteAutoTarget) {
                throw new Error("Could not find pre-requisite target \"" + preRequisiteTargetName + "\" (preRequisitesFullfilled)");
            }
            return preRequisiteAutoTarget.complete;
        });
    };
    Auto.prototype.postRequisitesFullfilled = function (autoTarget) {
        var _this = this;
        return autoTarget.target.postRequisites.every(function (postRequisiteTargetName) {
            var postRequisiteAutoTarget = _this.autoTargets[postRequisiteTargetName];
            if (!postRequisiteAutoTarget) {
                throw new Error("Could not find post-requisite target \"" + postRequisiteTargetName + "\"");
            }
            return postRequisiteAutoTarget.complete;
        });
    };
    Auto.prototype.preRequisitesComplete = function (autoTarget) {
        var _this = this;
        return autoTarget.target.preRequisites.every(function (preRequisiteTargetName) {
            var preRequisiteAutoTarget = _this.autoTargets[preRequisiteTargetName];
            if (!preRequisiteAutoTarget) {
                throw new Error("Could not find pre-requisite target \"" + preRequisiteTargetName + "\" (preRequisitesComplete)");
            }
            return preRequisiteAutoTarget.complete;
        });
    };
    Auto.prototype.postRequisitesComplete = function (autoTarget) {
        var _this = this;
        return autoTarget.target.postRequisites.every(function (postRequisiteTargetName) {
            var postRequisiteAutoTarget = _this.autoTargets[postRequisiteTargetName];
            if (!postRequisiteAutoTarget) {
                throw new Error("Could not find post-requisite target \"" + postRequisiteTargetName + "\"");
            }
            return postRequisiteAutoTarget.complete;
        });
    };
    Auto.prototype.addTargets = function (newTargets, sourceTarget) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, newTargets_1, target, _a, _b, targetName, target;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(newTargets instanceof Promise)) return [3 /*break*/, 2];
                        return [4 /*yield*/, newTargets];
                    case 1:
                        newTargets = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!Array.isArray(newTargets)) return [3 /*break*/, 7];
                        _i = 0, newTargets_1 = newTargets;
                        _c.label = 3;
                    case 3:
                        if (!(_i < newTargets_1.length)) return [3 /*break*/, 6];
                        target = newTargets_1[_i];
                        return [4 /*yield*/, this.addTargets(target, sourceTarget)];
                    case 4:
                        _c.sent();
                        _c.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 12];
                    case 7:
                        _a = 0, _b = Object.keys(newTargets);
                        _c.label = 8;
                    case 8:
                        if (!(_a < _b.length)) return [3 /*break*/, 12];
                        targetName = _b[_a];
                        target = newTargets[targetName];
                        return [4 /*yield*/, this.projectOptions.addTarget(targetName, target, sourceTarget.sourceComponent)];
                    case 9:
                        _c.sent();
                        return [4 /*yield*/, this.addTarget(target)];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11:
                        _a++;
                        return [3 /*break*/, 8];
                    case 12: return [4 /*yield*/, this.resolveRequisites()];
                    case 13:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Auto;
}());
exports.Auto = Auto;
//# sourceMappingURL=Auto.js.map